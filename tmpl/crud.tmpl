package $namespace

import (
	//Official libs
	"fmt"
	"net/url"
	"strings"
	"strconv"
	"time"

	//3rd party libs
	#for item in $obj.imports
	#if isinstance(item, tuple):
	$item[0] "$item[1]"
	#else
	"$item"
	#end if
	#end for

	//Own libs
	"admin"
	"xls"
	autoTpl "$tplPackage"
	"xuanwu"
	"zfw/models"
	"github.com/sipin/web"
	"labix.org/v2/mgo/bson"
)

var (
	Perm_$(className) = permission.New("$obj.scope", "$(obj.perm)")
	Perm_$(className)_Export = permission.New("$obj.scope.$(obj.perm)", "导出")
	Perm_$(className)_Print = permission.New("$obj.scope.$(obj.perm)", "打印")
)

type $(className)Context struct {
	*admin.AdminContext
}

func (c *$(className)Context) Create(ctx *web.Context) (newContext web.IContext) {
	a := &$(className)Context{}
	a.AdminContext = &admin.AdminContext{Context: ctx}
	return a
}

func (c *$(className)Context) BeforeHandler() (continueToHandler bool) {
	if !c.AdminContext.BeforeHandler() {
		return false
	}

	if c.ContextUser.HasPermission(Perm_$(className).Hash()) {
		return true
	}

	c.Context.Write([]byte("No Permision"))
	c.Context.Forbidden()

	return false
}

func init() {
	web.Get("$(urlBase)/index", $(className)Index)
	web.Get("$(urlBase)/export", $(className)Export)
	web.Get("$(urlBase)/view", $(className)View)
	web.Get("$(urlBase)/create", $(className)Create)
	web.Post("$(urlBase)/create", $(className)CreatePost)
	web.Get("$(urlBase)/edit", $(className)Edit)
	web.Post("$(urlBase)/edit", $(className)EditPost)
	web.Post("$(urlBase)/delete", $(className)DeletePost)
	#for field in $obj.fields
	#if hasattr(field, "relateFields")
	web.Get("$(urlBase)/relate/$field.name", $(className)$(field.name)Relate)
	#end if
	#end for
}

#if $obj.search != None
func getSearch$(className)(current *models.Users, q string, params map[string]string, limit int, offset int, sortFields []string) (objs []*models.$(className), total int) {
	#if $obj.crud == "personal"
	params["UsersID"] = current.Id()
	#end if
	out, _ := models.$(className)SearchWithParams(q, params, limit, offset)
	total = out.Hits.Total

	ids := make([]bson.ObjectId, 0, len(out.Hits.Hits))
	for _, hit := range out.Hits.Hits {
		if !bson.IsObjectIdHex(hit.Id) {
			continue
		}
		ids = append(ids, bson.ObjectIdHex(hit.Id))
	}

	query := bson.M{"_id": bson.M{"\$in": ids}}

	objs, _ = models.$(className)FindAll(query, sortFields...)
	return
}
#end if

func getQuery$(className)(current *models.Users, limit, offset int, sortFields []string) (objs []*models.$(className), total int) {
	query := bson.M{}
	#if $obj.crud == "personal"
	query["UsersID"] = current.Id()
	#end if

	objs, err := models.$(className)Find(query, limit, offset, sortFields...)
	if err != nil {
		return
	}
	total = models.$(className)Count(query)

	return
}

func get$(className)OrderSort(ctx *$(className)Context) (result map[string]string) {
	result = map[string]string{}
	order, ok := ctx.Params["orders"]
	if !ok {
		order = "$(obj.defaultOrder)"
	}
	orders := strings.Split(order, ",")
	for _, order := range orders {
		if order == ""{
			continue
		}
		if order[0] == '-' {
			result[order[1:len(order)]] = "desc"
		} else {
			result[order] = "asc"
		}
	}
	return
}

func get$(className)Sort(ctx *$(className)Context) (sortFields []string){
	order, ok := ctx.Params["orders"]
	if !ok {
		order = "$(obj.defaultOrder)"
	}
	sortFields = strings.Split(order, ",")
	return
}

func $(className)Index(ctx *$(className)Context) (html string) {
	var total int
	limit := 20
	if val, ok := ctx.Params["limit"]; ok {
		limit, _ = strconv.Atoi(val)
	}
	offset, _ := strconv.Atoi(ctx.Params["offset"])

	var obj *models.$(className)
	var objs []*models.$(className)

	sortFields := get$(className)Sort(ctx)
	orders := get$(className)OrderSort(ctx)
	#if $obj.search != None
	action := ctx.Params["_action"]
	q, ok := ctx.Params["q"]
	if action == "search" && ok {
		objs, total = getSearch$(className)(ctx.User, q, ctx.Params, limit, offset, sortFields)
	} else {
		objs, total = getQuery$(className)(ctx.User, limit, offset, sortFields)
	}
	#else
	objs, total = getQuery$(className)(ctx.User, limit, offset, sortFields)
	#end if

	stupidGoInterface := make([]xuanwu.IXuanWuObj, len(objs))
	for i, v := range objs {
		stupidGoInterface[i] = xuanwu.IXuanWuObj(v)
	}
	#if $obj.indextpl != None
	return $(obj.indextpl).Index(ctx.Context, "$obj.scope.$(obj.perm)", obj, stupidGoInterface, total, limit, offset, orders)
	#else
	return autoTpl.Index(ctx.Context, "$obj.scope.$(obj.perm)", obj, stupidGoInterface, total, limit, offset, orders)
	#end if
}

func $(className)Export(ctx *$(className)Context) (html string) {
	if !ctx.ContextUser.HasPermission(Perm_$(className)_Export.Hash()) {
		ctx.Context.Write([]byte("No Permision"))
		ctx.Context.Forbidden()
		return ""
	}

	limit := 20
	if val, ok := ctx.Params["limit"]; ok {
		limit, _ = strconv.Atoi(val)
	}
	offset, _ := strconv.Atoi(ctx.Params["offset"])

	var obj *models.$(className)
	var objs []*models.$(className)

	sortFields := get$(className)Sort(ctx)
	#if $obj.search != None
	action := ctx.Params["_action"]
	q, ok := ctx.Params["q"]
	if action == "search" && ok {
		objs, _ = getSearch$(className)(ctx.User, q, ctx.Params, limit, offset, sortFields)
	} else {
		objs, _ = getQuery$(className)(ctx.User, limit, offset, sortFields)
	}
	#else
	objs, _ = getQuery$(className)(ctx.User, limit, offset, sortFields)
	#end if

	sheet := xls.NewSheet("Sheet1")
	rows := make([]*xls.Row, len(objs) + 1)

	labelObjs := obj.GetListedLabels()
	var labels []interface{}
	labels = append(labels, "序号")
	for _, o := range labelObjs {
		labels = append(labels, o.Label)
	}
	rows[0] = xls.NewRow(labels...)

	for i, o := range objs {
		#for f in $obj.listedFieldNames
		#if "." in f
		$(f[:f.index(".")]), _ := o.Get$(f[:f.index(".")])()
		$(f.replace(".", "")) := ""
		if o.$(f[:f.index(".")])ID != "" {
			$(f.replace(".", "")) = $(f[:f.index(".")]).GetFieldAsString("$(f[f.index(".")+1:])")
		}
		#end if
		#end for
		rows[i + 1] = xls.NewRow(
			i+1,
			#for f in $obj.listedFieldNames
			#if "." in f
			$(f.replace(".", "")),
			#else
			o.GetFieldAsString("$(f)"),
			#end if
			#end for
		)
	}

	tbl := xls.NewTable(rows...)
	sheet.SetTable(tbl)

	ret, err := xls.Marshal(sheet)
	if err != nil {
		ctx.Logger.Error(err)
	}

	fname := fmt.Sprintf("%s_%s.xlsx", url.QueryEscape("$(obj.label)"), time.Now().Format("2006-01-02_1504"))
	fname = fmt.Sprintf("attachment;filename=\"%s\";filename*=utf-8''%s", fname, fname)
	ctx.SetHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8", true)
	ctx.SetHeader("Content-Disposition", fname, true)
	return string(ret)
}

func $(className)Create(ctx *$(className)Context) (html string) {
	var obj *models.$(className)
	data := ctx.GetSession("$(className)Create")

	if data != nil {
		obj = models.New$(className)FromBytes(data)
		obj.ValidateData()
		ctx.ClearSession("$(className)Create")
		#if $obj.createtpl != None
		return $(obj.createtpl).Create(ctx.Context, obj.Widgets(), "建立$(obj.label)")
		#else
		return autoTpl.Create(ctx.Context, obj.Widgets(), "建立$(obj.label)")
		#end if
	}
	#if $obj.createtpl != None
	return $(obj.createtpl).Create(ctx.Context, models.New$(className)().Widgets(), "建立$(obj.label)")
	#else
	return autoTpl.Create(ctx.Context, models.New$(className)().Widgets(), "建立$(obj.label)")
	#end if
}

func $(className)CreatePost(ctx *$(className)Context) (html string) {
	obj := models.New$(className)()
	hasError := obj.ReadForm(ctx.Params)

	if hasError {
		ctx.SetSession("$(className)Create", obj.ToBytes())
		ctx.Redirect("$(urlBase)/create")
		return
	}

#if $obj.hasUser
	if obj.UsersID == "" {
		obj.UsersID = ctx.User.Id()
	}
#end if

	obj.Save()
	ctx.ClearSession("$(className)Create")
	ctx.SetFlashNotice("保存成功")
	ctx.Redirect("index")
	return
}

func $(className)View(ctx *$(className)Context) (html string) {
	obj, err := models.$(className)FindByID(ctx.Params["id"])
	if err != nil {
		ctx.SetFlashAlert(err.Error())
		return ctx.Redirect("index")
	}

	#if $obj.viewtpl != None
	return $(obj.viewtpl).View(ctx.Context, "$obj.scope.$(obj.perm)", obj)
	#else
	return autoTpl.View(ctx.Context, "$obj.scope.$(obj.perm)", obj)
	#end if
}

func $(className)Edit(ctx *$(className)Context) (html string) {
	obj, err := models.$(className)FindByID(ctx.Params["id"])
	if err != nil {
		ctx.SetFlashAlert(err.Error())
		return ctx.Redirect("index")
	}

	if !ctx.User.IsCreator(obj) {
		ctx.SetFlashAlert("您没有编辑此项目的权限")
		return ctx.Redirect("view?id=" + obj.Id())
	}

	data := ctx.GetSession("$(className)Edit")

	if data != nil {
		o := models.New$(className)FromBytes(data)
		o.ValidateData()
		ctx.ClearSession("$(className)Edit")

		if o.ID == obj.ID {
			#if $obj.edittpl != None
			return $(obj.edittpl).Edit(ctx.Context, o)
			#else
			return autoTpl.Edit(ctx.Context, o)
			#end if
		}
	}

	#if $obj.edittpl != None
	return $(obj.edittpl).Edit(ctx.Context, obj)
	#else
	return autoTpl.Edit(ctx.Context, obj)
	#end if
}

func $(className)EditPost(ctx *$(className)Context) (html string) {
	obj, err := models.$(className)FindByID(ctx.Params["id"])
	if err != nil {
		ctx.SetFlashAlert(err.Error())
		return ctx.Redirect("index")
	}

	if !ctx.User.IsCreator(obj) {
		ctx.SetFlashAlert("没有权限")
		return ctx.Redirect("index")
	}

	hasError := obj.ReadForm(ctx.Params)

	if hasError {
		ctx.SetSession("$(className)Edit", obj.ToBytes())
		ctx.Redirect("edit?id=" + obj.Id())
		return
	}

	obj.Save()
	ctx.ClearSession("$(className)Edit")
	ctx.SetFlashNotice("修改成功")

	ctx.Redirect("index")
	return
}

func $(className)DeletePost(ctx *$(className)Context) (html string) {
	ids := ctx.Params["ids"]

	if ids == "" {
		id := ctx.Params["id"]
		obj, _ := models.$(className)FindByID(id)
		if !ctx.User.IsCreator(obj) {
			ctx.SetFlashAlert("您没有删除此项目的权限")
			return ctx.Redirect("view?id=" + obj.Id())
		}
		models.$(className)RemoveByID(id)
	} else {
		for _, id := range strings.Split(ids, "\n") {
			id = strings.Trim(id, "\r")
			obj, _ := models.$(className)FindByID(id)
			if !ctx.User.IsCreator(obj) {
				ctx.SetFlashAlert("您没有删除此项目的权限")
				return ctx.Redirect("view?id=" + obj.Id())
			}
			models.$(className)RemoveByID(id)
		}
	}

	ctx.SetFlashNotice("删除成功")
	ctx.Redirect("index")
	return
}

#for field in $obj.fields
#if hasattr(field, "relateFields")
func $(className)$(field.name)Relate(ctx *$(className)Context) (jsonData string) {
	ID, _ := ctx.Params["ID"]
	if ID != ""{
		data, _ := models.$(field.bindTable)FindByID(ID)
		if data == nil {
			return
		}
		rtn := map[string]string{}
		#for k, v in $field.relateFields
		rtn["$k"] = data.$(v)Widget().Value
		#end for
		jsonByte, _ := json.Marshal(rtn)
		jsonData = string(jsonByte)
	}
	return
}
#end if
#end for

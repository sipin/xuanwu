package $namespace

#import os
import (
	//Official libs
	#for item in $obj.imports
	"$item"
	#end for

	//3rd party libs
	"labix.org/v2/mgo"
	"labix.org/v2/mgo/bson"
	"github.com/sipin/gothrift/thrift"

	//Own libs
	"db"
	. "xuanwu"
)

func init() {
	#if $obj.need_index
	db.SetOnFinishInit(init${obj.name.value}Index)
	#end if
	#if $obj.need_mapping
	db.SetOnFinishInit(init${obj.name.value}Mapping)
	#end if
}

#if $obj.need_mapping
func init${obj.name.value}Mapping() {
	opt := indices.MappingOptions{
		Properties: map[string]interface{}{
			#for f in $obj.stringFilterFields
			"$f.name.value": map[string]string{"index": "not_analyzed", "type": "string"},
			#end for
		},
	}

	indices.CreateIndex("$(obj.name.value.lower())")
	indices.PutMapping("$(obj.name.value.lower())", "simple", $(obj.name.value){}, opt)
}
#end if

#if $obj.need_index
func init${obj.name.value}Index() {
	session, collection := db.GetCol(${obj.name.value}TableName)
	defer session.Close()
	#for field in $obj.fields
	#if hasattr(field, "index")

reEnsure${field.name}:
	if err := collection.EnsureIndex(mgo.Index{
		Key: []string{"${field.name}"},
		#if field.index == "unique"
		Unique: true,
		#end if
		Sparse: true,
	}); err != nil {
		println("error ensureIndex $obj.name.value $field.name", err.Error())
		err = collection.DropIndex("${field.name}")
		if err != nil {
			panic(err)
		}
		goto reEnsure${field.name}

	}

	#end if
	#end for
}
#end if

var ${obj.name.value}TableName = "${obj.name.value}"

type $obj.name.value struct {
	#for field in $obj.fields
		#if $field.name.value == "ID"
	ID         bson.ObjectId `bson:"_id,omitempty" thrift:"$field.name.value,$field.tag"`
		#else
	$field.name.value  $field.go_type `bson:"$field.name.value" thrift:"$field.name.value,$field.tag"`
		#end if
	#end for
	widgets map[string]*Widget
}

func New$(obj.name.value)() *$obj.name.value {
	rval := new($obj.name.value)
	rval.ID = bson.NewObjectId()
	#for field in $obj.fields
		#if $field.defaultValue
			rval.$field.name.value = "$field.defaultValue"
		#end if
	#end for

	return rval
}

func New$(obj.name.value)FromBytes(data []byte) *$obj.name.value {
	o := new($obj.name.value)
	transport := thrift.NewStreamTransportR(bytes.NewBuffer(data))
	protocol := thrift.NewTCompactProtocol(transport)
	o.Read(protocol)
	return o
}

func New$(obj.name.value)WithParams(params map[string]string) *$obj.name.value {
	o := new($obj.name.value)
	o.ReadForm(params)
	return o
}

//Thrift Methods

func (p *$obj.name.value) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
#for field in $obj.fields
		case $field.tag:
			if err := p.readField$(field.tag)(iprot); err != nil {
				return err
			}
#end for
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}
#for field in $obj.fields
	#set global $field = $field
	#include "tmpl" + $os.sep + "field_" + $field.type + ".tmpl"
#end for

func (p *$obj.name.value) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("$obj.name.value"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
#for field in $obj.fields
	if err := p.writeField$(field.tag)(oprot); err != nil {
		return err
	}
#end for
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *$obj.name.value) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("$(obj.name.value)(%+v)", *p)
}

func (p *$obj.name.value) ToBytes() []byte {
	transport := thrift.NewTMemoryBuffer()
	protocol := thrift.NewTCompactProtocol(transport)
	p.Write(protocol)
	protocol.Flush()

	return transport.Bytes()
}

#include "tmpl" + $os.sep + "mongo.tmpl"

#include "tmpl" + $os.sep + "form.tmpl"

#include "tmpl" + $os.sep + "foreign_key.tmpl"

#include "tmpl" + $os.sep + "collection.tmpl"

#include "tmpl" + $os.sep + "search.tmpl"

#include "tmpl" + $os.sep + "property.tmpl"

//Collection Manage methods

func $(obj.name.value)FindOne(query interface{}, sortFields ...string) (result *$obj.name.value, err error) {
	session, col := db.GetCol("$obj.name.value")
	defer session.Close()

	q := col.Find(query)

	$(obj.name.value.lower())Sort(q, sortFields)

	err = q.One(&result)
	return
}

func $(obj.name.value.lower())Sort(q *mgo.Query, sortFields []string) {
	sortFields = XSortFieldsFilter(sortFields)
	if len(sortFields) > 0 {
		q.Sort(sortFields...)
		return
	}

	#if len([i for i in $obj.fields if str(i.name)=="Index"]) > 0
	q.Sort("Index", "-_id")
	#else
	q.Sort("-_id")
	#end if
}

func $(obj.name.value)Find(query interface{}, limit int, offset int, sortFields ...string) (result []*$obj.name.value, err error) {
	session, col := db.GetCol("$obj.name.value")
	defer session.Close()

	q := col.Find(query).Limit(limit).Skip(offset)

	$(obj.name.value.lower())Sort(q, sortFields)

	err = q.All(&result)
	return
}

func $(obj.name.value)FindAll(query interface{}, sortFields ...string) (result []*$obj.name.value, err error) {
	session, col := db.GetCol("$obj.name.value")
	defer session.Close()

	q := col.Find(query)

	$(obj.name.value.lower())Sort(q, sortFields)

	err = q.All(&result)
	return
}

func $(obj.name.value)Count(query interface{}) (result int) {
	session, col := db.GetCol("$obj.name.value")
	defer session.Close()

	result, _ = col.Find(query).Count()
	return
}

func $(obj.name.value)FindByIDs(id []string, sortFields ...string) (result []*$obj.name.value, err error) {
	ids := make([]bson.ObjectId, 0, len(id))
	for _, i := range id {
		if bson.IsObjectIdHex(i) {
			ids = append(ids, bson.ObjectIdHex(i))
		}
	}
	return $(obj.name.value)FindAll(db.M{"_id": db.M{"\$in": ids}}, sortFields...)
}

#for i in $obj.toList
func ${obj.name.value}To${i}List(ms []*$obj.name.value) ([]string) {
	ret := make([]string, len(ms))
	for idx, m := range ms {
	#if $i == "ID"
		ret[idx] = m.Id()
	#else
		ret[idx] = m.$i
	#end if
	}
	return ret
}
#end for

func ${obj.name.value}ToMap(ms []*$obj.name.value) (map[string]*$obj.name.value) {
	ret := make(map[string]*$obj.name.value, len(ms))
	for _, m := range ms {
		ret[m.Id()] = m
	}
	return ret
}

func $(obj.name.value)FindByID(id string) (result *$obj.name.value, err error) {
	session, col := db.GetCol("$obj.name.value")
	defer session.Close()

	if !bson.IsObjectIdHex(id) {
		err = mgo.ErrNotFound
		return
	}
	err = col.FindId(bson.ObjectIdHex(id)).One(&result)
	return
}

func $(obj.name.value)RemoveAll(query interface{}) (info *mgo.ChangeInfo, err error) {
	session, col := db.GetCol("$obj.name.value")
	defer session.Close()

	return col.RemoveAll(query)
}

func $(obj.name.value)RemoveByID(id string) (result *$obj.name.value, err error) {
	session, col := db.GetCol("$obj.name.value")
	defer session.Close()

	if !bson.IsObjectIdHex(id) {
		err = mgo.ErrNotFound
		return
	}
	err = col.RemoveId(bson.ObjectIdHex(id))
	#if $obj.search != None
	core.Delete("$(obj.searchIndex)", "$(obj.searchType)", id, nil)
	#end if
	return
}


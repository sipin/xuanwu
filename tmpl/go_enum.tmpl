package $namespace

import (
	"strconv"
	"encoding/json"
)

var _ = strconv.Itoa
var _ = json.Marshal

#for obj in $objs
var (
	$obj.name.value = struct {
		${",".join([item.name.value for item in obj.values])} int32
} {
		${",".join([str(item.tag) for item in obj.values])},
	}
	${obj.name.value}Field = map[int32]string {
#for item in obj.values
		$item.tag: "${item.name.value}",
#end for
	}
	${obj.name.value}Label = map[int32]string {
#for key, label in $obj.labels.items()
		$key: $label,
#end for
	}
	${obj.name.value}Key = []int32 {
		${",".join([str(item.tag) for item in obj.values])},
	}
	${obj.name.value}JSON string
	${obj.name.value}LabelJSON string
)
#end for

func init() {
	var ret []byte
	var err error
#for obj in $objs
	{
		ret, _ = json.Marshal(${obj.name.value})
		${obj.name.value}JSON = string(ret)
		tmp := make(map[string]string, len(${obj.name.value}Label))
		for k, v := range ${obj.name.value}Label {
			tmp[strconv.Itoa(int(k))] = v
		}
		ret, err = json.Marshal(tmp)
		if err != nil {
			panic(err)
		}
		${obj.name.value}LabelJSON = string(ret)
	}
	
#end for
}

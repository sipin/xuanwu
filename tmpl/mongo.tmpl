//mongo methods
var (
	insertCB_$obj.name.value []func(obj IXuanWuObj)
	updateCB_$obj.name.value []func(obj IXuanWuObj)
)

func $(obj.name.value)AddInsertCallback(cb func(obj IXuanWuObj)) {
	insertCB_$obj.name.value = append(insertCB_$obj.name.value, cb)
}

func $(obj.name.value)AddUpdateCallback(cb func(obj IXuanWuObj)) {
	updateCB_$obj.name.value = append(updateCB_$obj.name.value, cb)
}

func (o *$obj.name.value) Save() (info *mgo.ChangeInfo, err error) {
	session, col := ${obj.name.value}Col()
	defer session.Close()

	isNew := o.isNew

	#for field in $obj.fields
	#if $field.name.value != "ID" and hasattr($field, "meta")
	old_metas, _ := o.GetAll$(field.meta)()
	new_metas, _ := $(field.meta)FindByIDs(o.$(field.name.value))
	for _, meta := range old_metas {
		$(field.meta)RemoveByID(meta.ID.Hex())
	}
	for _, meta := range new_metas {
		meta.Save()
	}
	#end if
	#end for

	info, err = col.UpsertId(o.ID, o)
	o.isNew = false

#if $obj.search != None
	o.IndexSearch()
#end if

	if isNew {
		for _, cb := range insertCB_$obj.name.value {
			cb(o)
		}
	} else {
		for _, cb := range updateCB_$obj.name.value {
			cb(o)
		}
	}

	return
}

func (o *$obj.name.value) Sync() (err error) {
	session, col := ${obj.name.value}Col()
	defer session.Close()

	info, err := col.Find(o).Apply(mgo.Change{
		Update:    o,
		Upsert:    true,
		ReturnNew: true,
	}, o)

	o.isNew = false

	if info.UpsertedId == nil {
		for _, cb := range updateCB_$obj.name.value {
			cb(o)
		}
	} else {
		for _, cb := range insertCB_$obj.name.value {
			cb(o)
		}
	}
	return
}

func $(obj.name.value)Col() (session *mgo.Session, col *mgo.Collection) {
	return db.GetCol("${obj.name.value}")
}

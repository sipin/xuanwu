//Search
#if $obj.search != None
type $(obj.name.value)SearchIndexObj struct {
	#for field in $obj.search
	$field.name.value $field.go_type `json:"$(field.name.value)"`
	#end for
	#for field in $obj.filterFields
	$field.name.value $field.go_type `json:"$(field.name.value)"`
	#end for
}

func (o *$obj.name.value) IndexSearch() () {
	core.Index("$(obj.name.value.lower())", "simple", o.ID.Hex(), nil, $(obj.name.value)SearchIndexObj{
		#for field in $obj.search
		o.$(field.name.value),
		#end for
		#for field in $obj.filterFields
		o.$(field.name.value),
		#end for
	})
}

var $(obj.name.value)SearchFileds = []string{
	#for field in $obj.search
	"$(field.name.value)",
	#end for
}

var $(obj.name.value)SearchTermKeys = map[string]bool{
	#for field in $obj.termKeys
	"$(field)": true,
	#end for
}

var $(obj.name.value)SearchDateKeys = map[string]bool{
	#for field in $obj.dateKeys
	#if field.endswith("Start")
	"$(field)": true,
	#else
	"$(field)": false,
	#end if
	#end for
}

func $(obj.name.value)SearchWithParams(word string, params map[string]string, limit int, offset int) (core.SearchResult, error) {
	searchObj := XGetSearchObj(word, $(obj.name.value)SearchFileds, params, $(obj.name.value)SearchTermKeys, $(obj.name.value)SearchDateKeys)
	args := map[string]interface{} {"from" : offset, "size": limit}
	return core.SearchRequest("$(obj.name.value.lower())", "simple", args, searchObj)
}

#if $obj.need_searchmore
func $(obj.name.value)SearchWithMoreParams(word string, params map[string]interface{}, limit int, offset int) (core.SearchResult, error) {
	searchObj := XGetMoreSearchObj(word, $(obj.name.value)SearchFileds, params, $(obj.name.value)SearchTermKeys, $(obj.name.value)SearchDateKeys)
	args := map[string]interface{} {"from" : offset, "size": limit}
	return core.SearchRequest("$(obj.name.value.lower())", "simple", args, searchObj)
}
#end if

func $(obj.name.value)Search(word string, limit int, offset int) (core.SearchResult, error) {
	searchObj := XGetQuery("query_string", XGetQueryString(word, $(obj.name.value)SearchFileds))
	args := map[string]interface{} {"from" : offset, "size": limit}
	return core.SearchRequest("$(obj.name.value.lower())", "simple", args, searchObj)
}

func $(obj.name.value)SearchPurge() {
	core.Delete("$(obj.name.value.lower())", "simple", "", nil)
}

func $(obj.name.value)SearchRebuild() {
	$(obj.name.value)SearchPurge()
#if $obj.need_mapping
	init${obj.name.value}Mapping()
#end if
	total := $(obj.name.value)Count(nil)
	step := 100
	start := 0
	for start < total {
		objs, _ := $(obj.name.value)Find(nil, step, start)
		for _, o := range objs {
			o.IndexSearch()
		}
		start += len(objs)
	}
}
#end if

func (o *$obj.name.value) IsSearchEnabled() bool {
#if $obj.search != None
	return true
#else
	return false
#end if
}

//end search

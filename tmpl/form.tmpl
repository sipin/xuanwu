//Form methods

func (w *$(obj.name.value)) initWidget() {
	w.widgets = make(map[string]*Widget, $len($obj.fields))
}

func (o *$obj.name.value) ReadForm(params map[string]string) (hasError bool) {
#for field in $obj.fields
#if $field.name.value != "ID"
	if val, ok := params["$field.name.value"]; ok {
	#if hasattr($field, "meta")
		o.$field.name.value = []string{}
		var tmp interface{}
		json.Unmarshal([]byte(val), &tmp)
		if tmp != nil {
			if datas, ok := tmp.([]interface{}); ok{
				for _, raw := range datas {
					tmpObj := raw.(map[string]interface{})
					single := map[string]string{}
					for k, v := range tmpObj {
						if value, ok := v.(string); ok {
							single[k] = value
						}
					}
					record := New$(field.meta)()
					record.ReadForm(single)
					record.$(obj.name.value)ID = o.ID.Hex()
					record.Save()
					o.$field.name.value = append(o.$field.name.value, record.ID.Hex())
				}
			}
		}
	#else if $field.type == "string"
		o.$field.name.value = val
	#else if $field.type == "i32" and $field.widget_type in ["datetime"]
		if val == "" {
			o.$field.name.value = 0
		} else {
		        loc, _ := time.LoadLocation("Local")
			intVal, _ := time.ParseInLocation(DateTimeLayout, val, loc)
			o.$field.name.value = int32(intVal.Unix())
		}
	#else if $field.type == "i32"
		intVal, _ := strconv.Atoi(val)
		#if hasattr(field, "stringList")
		if intVal <= 0 {
			intVal = 0
		}
		#end if
		o.$field.name.value = int32(intVal)
	#else if $field.type == "i64" and $field.widget_type in ["datetime"]
		if val == "" {
			o.$field.name.value = 0
		} else {
		        loc, _ := time.LoadLocation("Local")
			intVal, _ := time.ParseInLocation(DateTimeLayout, val, loc)
			o.$field.name.value = intVal.Unix()
		}
	#else if $field.type == "i64" and $field.widget_type in ["date"]
		if val == "" {
			o.$field.name.value = 0
		} else {
		        loc, _ := time.LoadLocation("Local")
			intVal, _ := time.ParseInLocation(DateLayout, val, loc)
			o.$field.name.value = intVal.Unix()
		}
	#else if $field.type == "i64" and $field.widget_type in ["time"]
		if val == "" {
			o.$field.name.value = 0
		} else {
		        loc, _ := time.LoadLocation("Local")
			intVal, _ := time.ParseInLocation(TimeLayout, val, loc)
			o.$field.name.value = intVal.Unix()
		}
	#else if $field.type == "i64"
		intVal, _ := strconv.ParseInt(val, 10, 64)
		o.$field.name.value = intVal
	#else if $field.type == "double"
		floatVal, _ := strconv.ParseFloat(val, 64)
		o.$field.name.value = floatVal
	#else if $field.type == "bool"
		o.$field.name.value = (val != "")
	#else if $field.type == "list<string>"
		o.$field.name.value = strings.Split(val, "\n")
		for i, k := range o.$field.name.value {
			o.$(field.name.value)[i] = strings.Trim(k, "\r")
		}
	#else
	Change go.tmpl go support $field.type now!
	#end if
	#if $field.type == "bool"
	} else {
		o.$field.name.value = false
	#end if
	}
#end if
#end for
	return o.ValidateData()
}

func (o *$obj.name.value) ValidateData() (hasError bool) {
#for field in $obj.fields
	#if field.required and hasattr(field, "rule")
	if o.$field.name.value == "" {
		hasError = true
		o.${field.name.value}Widget().ErrorMsg = "$field.requiredMsg"
	} else {
		if !regexp.MustCompile(`$field.rule`).Match([]byte(o.$field.name.value)) {
			hasError = true
			o.${field.name.value}Widget().ErrorMsg = "$field.ruleMsg"
		}
	}
	#else if field.required
		#if $field.type == "string"
	if o.$field.name.value == "" {
		#elif $field.type in ["i32", "i64"]
	if o.$field.name.value == 0 {
		#elif $field.type in ["double"]
	if o.$field.name.value == 0.0 {
		#elif $field.type == "list<string>"
	if len(o.$field.name.value) == 0 {
		#end if
		o.${field.name.value}Widget().ErrorMsg = "$field.requiredMsg"
		hasError = true
	}

	#else if hasattr(field, "rule")
	if !regexp.MustCompile(`$field.rule`).Match([]byte(o.$field.name.value)) {
		o.${field.name.value}Widget().ErrorMsg = "$field.ruleMsg"
		hasError = true
	}
	#end if
#end for
	return
}

#for field in $obj.fields
#if $field.name.value == "ID"
func (o *$obj.name.value) IDWidget() *Widget {
	name := "${field.name.value}"
	ret, ok := o.widgets[name]
	if !ok || ret==nil {
		ret = &Widget{
			Type: "hidden",
			Name: "ID",
			Value: o.Id(),
		}
		if o.widgets == nil {
			o.initWidget()
		}
		o.widgets[name] = ret
	}

	return ret
}
#else
func (o *$obj.name.value) ${field.name.value}Widget() *Widget {
	name := "${field.name.value}"
	ret, ok := o.widgets[name]
	if !ok || ret==nil {
		ret = &Widget{
			Label: "$field.label",
		#if $field.type == "string"
			Value : o.$field.name.value,
		#else if $field.type == "i32" and $field.widget_type in ["datetime"]
			Value : I32Time(o.$field.name.value),
		#else if $field.type == "i32"
			Value : strconv.FormatInt(int64(o.$field.name.value), 10),
		#else if $field.type == "i64" and $field.widget_type == "datetime"
			Value : I64DateTime(o.$field.name.value),
		#else if $field.type == "i64" and $field.widget_type == "date"
			Value : I64Date(o.$field.name.value),
		#else if $field.type == "i64" and $field.widget_type == "time"
			Value : I64Time(o.$field.name.value),
		#else if $field.type == "i64"
			Value : strconv.FormatInt(o.$field.name.value, 10),
		#else if $field.type == "double"
			Value : strconv.FormatFloat(o.$field.name.value, 'f', 2, 64),
		#else if $field.type == "bool"
			Value : strconv.FormatBool(o.$field.name.value),
		#else if $field.type == "list<string>"
			Value : strings.Join(o.$field.name.value, "\n"),
			IsList : true,
			#if not hasattr($field, "stringList")
			StringList : o.$field.name.value,
			#end if
		#else
		Change go.tmpl go support $field.type now!
		#end if
			Name: "$field.name.value",
			PlaceHolder: "$field.placeholder",
			Type: "$field.widget_type",
		#if hasattr($field, "enums")
			EnumKey : $(filename).$(field.enums)Key,
			EnumData : $(filename).$(field.enums)Label,
		#else if hasattr($field, "stringList")
			StringList : $(filename).$field.stringList,
		#else if hasattr($field, "bindData")
			GetBindData : $field.bindData,
			#if hasattr($field, "GroupedDataFunc")
			GetGroupedData : $field.GroupedDataFunc,
			#end if
		#else if hasattr($field, "meta")
			GetMetaData : $field.metaFunc,
		#else if $field.required
			Required: true,
		#end if
		#if hasattr($field, "disable")
		        Disabled: $field.disable,
		#end if
		#if hasattr($field, "hidden")
		        Hidden: $field.hidden,
		#end if
		#if hasattr($field, "readonly")
		        Readonly: $field.readonly,
		#end if
		}
		if o.widgets == nil {
			o.initWidget()
		}
		o.widgets[name] = ret
	}

	return ret
}
#end if
#end for

func (o *$obj.name.value) GetListedLabels() []*IDLabelPair {
	return []*IDLabelPair{
		#for field in $obj.listedFields
		&IDLabelPair {
			ID : "$field.key",
			Label : "$field.label",
			#if hasattr(field, "order")
			Order : "$field.order",
			#end if
		},
		#end for
	}
}

func (o *$obj.name.value) Id() string {
	return o.ID.Hex()
}

func (o *$obj.name.value) GetLabel() string {
	return "$obj.label"
}

func (o *$obj.name.value) GetName() string {
	return "$obj.name.value"
}

func (o *$obj.name.value) GetFieldAsString(fieldKey string) (Value string) {
	switch fieldKey {
#for field in $obj.listedFieldStrings
	case "$field.key":
		f, err := o.Get$(field.objName)()
		if err != nil {
			return
		}
		Value = f.$(field.objField)
#end for
#for field in $obj.fields
	case "$field.name.value":
	#if $field.name.value == "ID"
		Value = o.ID.Hex()
	#else if $field.type == "string"
	        widget := o.${field.name.value}Widget()
		if widget.Type == "select" {
		   Value = widget.Val()
		} else if widget.GetBindData != nil {
			Value = widget.Val()
		} else {
		   Value = o.$field.name.value
		}
	#else if $field.type == "i32" and $field.widget_type == "datetime"
		Value = I32Time(o.$field.name.value)
	#else if $field.type == "i32"
	        widget := o.${field.name.value}Widget()
		if widget.Type == "select" {
		   	       idx := int32(o.$field.name.value)
			       Value = widget.StringList[idx]
		} else {
				Value = strconv.FormatInt(int64(o.$field.name.value), 10)
		}
	#else if $field.type == "i64" and $field.widget_type == "datetime"
		Value = I64DateTime(o.$field.name.value)
	#else if $field.type == "i64" and $field.widget_type == "date"
		Value = I64Date(o.$field.name.value)
	#else if $field.type == "i64" and $field.widget_type == "time"
		Value = I64Time(o.$field.name.value)
	#else if $field.type == "i64"
		widget := o.${field.name.value}Widget()
		if widget.Type == "select" {
		   	       idx := int64(o.$field.name.value)
			       Value = widget.StringList[idx]
		} else {
				Value = strconv.FormatInt(int64(o.$field.name.value), 10)
		}
	#else if $field.type == "double"
		Value = strconv.FormatFloat(o.$field.name.value, 'f', 2, 64)
	#else if $field.type == "bool"
		Value = strconv.FormatBool(o.$field.name.value)
	#else if $field.type == "list<string>"
		Value = strings.Join(o.$field.name.value, "\n")
	#else
	Change go.tmpl go support $field.type now!
	#end if
#end for
	}
	return
}

type ${obj.name.value}Widget struct {
#for field in $obj.fields
	${field.name.value} *Widget
#end for
}

var ${obj.name.value}Fields = struct {
#for field in $obj.fields
	${field.name.value} string
#end for
} {
#for field in $obj.fields
	"${field.name.value}",
#end for
}

func (o *$obj.name.value) WidgetStruct() *${obj.name.value}Widget {
	return &${obj.name.value}Widget{
#for field in $obj.fields
	${field.name.value}: o.${field.name.value}Widget(),
#end for
	}
}

func (o *$obj.name.value) GetFilters() []*Widget {
	return []*Widget{
#for field in $obj.filterFields
		&Widget{
			Label: "$field.label",
			Name: "$field.name.value",
			PlaceHolder: "$field.placeholder",
			Type: "$field.widget_type",
		#if hasattr($field, "enums")
			EnumKey : $(filename).$(field.enums)Key,
			EnumData : $(filename).$(field.enums)Label,
		#else if hasattr($field, "stringList")
			StringList : $(filename).$field.stringList,
		#else if hasattr($field, "bindData")
			GetBindData : $field.bindData,
		#end if
		},
#end for
	}
}

func (o *$obj.name.value) Widgets() []*Widget {
	return []*Widget{
#for field in $obj.fields
#if $field.name.value != "ID"
		o.${field.name.value}Widget(),
#end if
#end for
	}
}
